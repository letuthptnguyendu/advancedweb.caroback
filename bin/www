#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("caro-back:server");
var http = require("http");
const socketIO = require('socket.io')

const Games = require('../models/games')
    /**
     * Get port from environment and store in Express.
     */

var port = normalizePort(process.env.PORT || "4000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIO(server)
let pendingList = []


io.on('connection', socket => {
    console.log(pendingList)

    console.log('User connected')

    socket.on("pending", id => {
        pendingList.push(id)

        if (pendingList[0] && pendingList[1]) {
            const game = new Games({
                user_id: pendingList[0],
                user2_id: pendingList[1],
                type: "pvp",
                history: [],
                status: ""
            });

            game
                .save()
                .then(data => {
                    io.sockets.emit('join-game', data)

                    pendingList.shift()
                    pendingList.shift()
                })
                .catch(err => console.log("letu err save game", err));
        }
    });


    socket.on('disconnect', () => {
        console.log('user disconnected')
    })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}